<?php

/**
 * Similar to node_load, accepts an array of parameters, but returns an array
 *  of nodes instead of the original first only.  (Useful when iterating over
 *  all nodes of a given type).
 * 
 * @author Adam Vessey
 *    Modified from node_load in node.module
 * @param array $param
 * @return array Containing 'node' objects. 
 */
function islandora_fjm_loadnodes($param = array('march_menus')) {
  $nodes = array();
  
  if (is_numeric($param)) {
    $cond = 'n.nid = %d';
    $arguments[] = $param;
  }
  elseif (is_array($param)) {
    // Turn the conditions into a query.
    foreach ($param as $key => $value) {
      $cond[] = 'n.'. db_escape_table($key) ." = '%s'";
      $arguments[] = $value;
    }
    $cond = implode(' AND ', $cond);
  }
  else {
    return FALSE;
  }

  // Retrieve a field list based on the site's schema.
  $fields = drupal_schema_fields_sql('node', 'n');
  $fields = array_merge($fields, drupal_schema_fields_sql('node_revisions', 'r'));
  $fields = array_merge($fields, array('u.name', 'u.picture', 'u.data'));
  // Remove fields not needed in the query: n.vid and r.nid are redundant,
  // n.title is unnecessary because the node title comes from the
  // node_revisions table.  We'll keep r.vid, r.title, and n.nid.
  $fields = array_diff($fields, array('n.vid', 'n.title', 'r.nid'));
  $fields = implode(', ', $fields);
  // Rename timestamp field for clarity.
  $fields = str_replace('r.timestamp', 'r.timestamp AS revision_timestamp', $fields);
  // Change name of revision uid so it doesn't conflict with n.uid.
  $fields = str_replace('r.uid', 'r.uid AS revision_uid', $fields);

  $query = "SELECT $fields 
    FROM {node} n 
      INNER JOIN {users} u ON u.uid = n.uid 
      INNER JOIN {node_revisions} r ON r.vid = n.vid
    WHERE ";
  
  $result = db_query($query . $cond, $arguments);
  
  while($node_result = db_fetch_object($result)) {
    if ($node_result->nid) {
    // Call the node specific callback (if any) and piggy-back the
    // results to the node or overwrite some values.
      if ($extra = node_invoke($node_result, 'load')) {
        foreach ($extra as $key => $value) {
          $node_result->$key = $value;
        }
      }

      if ($extra = node_invoke_nodeapi($node_result, 'load')) {
        foreach ($extra as $key => $value) {
          $node_result->$key = $value;
        }
      }
    }
    $nodes[] = $node_result;
  }

  return $nodes;
}

/**
 * Function to update the Menu with external markup.
 * Happens in this implementation of hook_cron...  Perhaps it should be moved?
 * @todo:  Move menu functionality into separate function.
 * @param $node_select array Selector as per node_load.  For use in this \
 *   function, these nodes need a Link field named field_link, and a text field \
 *   of the element to select named 'field_element_id'
 */
function islandora_fjm_scraper($node_select = array('type' => 'march_menus')) {
  //Grab the nodes to modify (using our modification of node_load
  $nodes = islandora_fjm_loadnodes($node_select);

  $doc = new DOMDocument();
  
  //Process the nodes:
  foreach($nodes as $node) {
    //Grab the page containing the markup
    $doc->loadHTMLFile($node->field_link[0]['url']);
    
    //Parse it, so as to be able to fix relative links
    $url_info = parse_url($node->field_link[0]['url']);
    
    //XPath is nice. :P
    $xpath = new DOMXPath($doc);
    
    //Select the element being scraped
    $scraped = $xpath->query("//*[@id='" .$node->field_element_id[0]['value'] . "']")->item(0);
    
    //Select all the links in the element being scraped which are relative to the host...
    foreach($xpath->query(".//a[starts-with(@href, '/')]", $scraped) as $rel_link) {
      //And make them absolute
      //FIXME (minor):  A different port would break this...
      $rel_link->setAttribute('href', t('!prot://!host!path', array(
          '!prot' => $url_info['scheme'], 
          '!host' => $url_info['host'], 
          '!path' => $rel_link->getAttribute('href')
        )));
    }
    
    //'Output':
    //Create a new DOMDoc
    $doc = new DOMDocument();
    
    //Import the scraped node... 
    $imp = $doc->importNode($scraped, TRUE);
    //...into the root node
    $doc->appendChild($imp);
    
    //Write out the scraped content
    $node->body = $doc->saveHTML();
    //And save it to the node.
    node_save($node);
  }
}

/**
 * Implementation of hook_cron()
 */
function islandora_fjm_cron() {
  islandora_fjm_scraper();
}

function islandora_fjm_islandora_solr_primary_display() {
  return array(
    // 'machine-name' = array(
    //   'name' => 'Human Readable Name',
    //   'module' => 'module_name',
    //   'file' => 'FileName.inc',
    //   'class' => 'ClassName',
    //   'function' => 'function_name',
    //   'description' => 'A description of the display profile',
    // );
    'islandora_fjm' => array(
      'name' => t('FJM display'),
      'module' => 'islandora_fjm',
      'file' => 'includes/SolrResults.inc',
      'class' => "SolrResults",
      'function' => "displayFJMResults",
      'description' => t("Change display based on type."),
    ),
  );
}

function islandora_fjm_menu() {
    $items = array();
    
    //Hacking a hack...  Need to get the XSLTs used to index in GSearch.
    //  The XSLTs reference each other, and Xalan seems to have trouble
    //  With relative URLs.
    //TODO:  Might want to look at locking it down?  The callback function restricts to
    //  only .xsd and .xsl, so I don't see a major issue.
    $items['fedora/xml'] = array(
        'title' => 'Get stored XML',
        'page callback' => 'islandora_fjm_display_schema',
        'type' => MENU_CALLBACK,
        'access callback' => TRUE
    );
    return $items;
}

function islandora_fjm_display_schema() {
    $filepath = drupal_get_path('module', 'islandora_fjm');

    //Build the path (relative to the module path) -- kinda bad, but anyway.
    foreach (func_get_args() as $i) {
        $filepath .= '/' . $i;
    }

    $exts = array(
        '.xslt' => TRUE
    );
    $ext = strtolower(strrchr($filepath, "."));
    if (isset($exts[$ext]) && $exts[$ext] && file_exists($filepath)) {
        drupal_goto($filepath);
    } 
    else {
        drupal_goto();
    }
    return;
}

function islandora_fjm_theme() {
    return array(
        'islandora_fjm_solr_result' => array(
            'arguments' => array(
                'item' => NULL
            ),
            'template' => 'templates/solr_result'
        ),
        'islandora_fjm_atm_concert' => array(
            'arguments' => array(
                'pid' => NULL,
                'pagenumber' => NULL,
                'concert' => NULL,
                'islandoraPath' => drupal_get_path("module", "islandora_fjm"), 
                'fedoraPath' => variable_get("fedora_base_url", 'http://localhost:8080/fedora')
            ),
            'template' => 'templates/atm_concert'
        ),
        'islandora_fjm_atm_score' => array(
            'arguments' => array(
                'pid' => NULL,
                'pagenumber' => 1,
                'title' => t('unknown'),
                'composer' => t('unknown'),
                'abstract' => t('No abstract'),
                'notes' => array()

            ),
            'template' => 'templates/atm_score'
        ),
        'islandora_fjm_flexpaper' => array(
            'arguments' => array(
                'pid' => NULL,
                'dsid' => 'SWF',
                'pagenumber' => 1,
                'flexpaper_path' => '/' . drupal_get_path("module", "islandora_fjm") . '/flexpaper',
                'flexpaper_config' => array(
                    'Scale' => 0.6,
                    'ZoomTransition' => '"easeOut"',
                    'ZoomTime' => 0.5,
                    'ZoomInterval' => 0.1,
                    'FitPageOnLoad' => 'false',
                    'FitWidthOnLoad' => 'true',
                    'PrintEnabled' => 'false',
                    'FullScreenAsMaxWindow' => 'true',
                    'ProgressiveLoading' => 'true',
                    'MinZoomSize' => 0.2,
                    'MaxZoomSize' => 5,
                    'SearchMatchAll' => 'false',
                    'InitViewMode' => "'Portrait'",
                    'ViewModeToolsVisible' => 'true',
                    'ZoomToolsVisible' => 'true',
                    'NavToolsVisible' => 'true',
                    'CursorToolsVisible' => 'true',
                    'SearchToolsVisible' => 'true',
                    'localeChain' => '"en_US"'
                )
            ),
            'template' => 'templates/atm_flexpaper'
        ),
        'islandora_fjm_atm_program' => array(
            'arguments' => array(
                'pid' => NULL,
                'dsid' => 'SWF',
                'pagenumber' => 1,
                'concert' => array(),
                'toc' => NULL,
                'notes' => array()
            ),
            'template' => 'templates/atm_program'
        ),
        'islandora_fjm_atm_person' => array(
            'arguments' => array(
                'pid' => NULL,
                'name' => array(
                    'first' => t('unknown'),
                    'last' => t('unknown')
                ),
                'date' => array(
                    'birth' => NULL,
                    'death' => NULL
                ),
                'biography' => t('No biography'),
                'default_image' => url("fedora/repository/atm:defaultPersonImage"),
                'performances' => array(),
                'performance_headers' => array("blah")
            ),
            'template' => 'templates/atm_person'
        ),
        'islandora_fjm_atm_imagegallery' => array(
            'arguments' => array(
                'pid' => NULL,
                'attributes' => array(
                    'class' => 'image_strip_group'
                ),
                'images' => array()
            ),
            'template' => 'templates/imagegallery'
        ),
        'islandora_fjm_atm_flowplayer' => array(
            'arguments' => array(
                'selector' => 'ol.atm_clips',
                'base' => drupal_get_path("module", "islandora_fjm") . '/flowplayer',
                //@todo:  Move this variable get, as it gets cached...  Changing 
                //  (or setting) the code is not reflected until template cache 
                //  is rebuilt.
                'trackingCode' => variable_get('googleanalytics_account', NULL)
            ),
            'template' => 'templates/atm_player'
        ),
        'islandora_fjm_atm_now_playing' => array(
            'arguments' => array(
                'piece' => NULL,
                'players' => NULL
            ),
            'template' => 'templates/atm_now_playing'
        )
    );
}

function islandora_fjm_preprocess_islandora_fjm_atm_now_playing(&$vars) {
  //if (is_callable('dsm')) { dsm($vars); }
}

function islandora_fjm_get_pid_from_array(&$array) {
  if (is_array($array)) {
    foreach($array as $key => $value) {
      if (strpos($value, ':')) {
        return $value;
      }
    }
  }
  else {
    return $array;
  }
}

function islandora_fjm_preprocess_islandora_fjm_solr_result(&$vars) {
    module_load_include('inc', 'islandora_fjm', 'includes/callbacks');
    $result = $vars['item'];
    /*if (is_callable('dsm')) {
        global $conf;
        dsm($conf);
    }*/
    $toReturn = array();

    switch ($result->atm_type_s) {
    case "Composer":
    case "Compositores":
            $toReturn['icon'] = "fedora/repository/" . $result->atm_composer_icon_s . "/TN";
            $toReturn['icon_image'] = theme('image', $toReturn['icon'], '', '', '', FALSE);
            $toReturn['name'] = $result->atm_composer_name_s;
            $toReturn['name_link'] = l($result->atm_composer_name_s, "fedora/repository/$result->PID");
    break;
    case "Concert":
    case "Conciertos":
            $toReturn = array_merge($toReturn, 
                array(
                    'title' => $result->atm_concert_title_s,
                    'cycle' => $result->atm_concert_cycle_s,
                    'date' => $result->atm_concert_date_dt,
                    'icon' => $result->atm_concert_iconpid_s,
                    'program' => array(
                        'pdf' => $result->atm_concert_program_pdf_b,
                        'titn' => $result->atm_concert_program_titn_s
                    ),
                    'digital_objects' => (is_array($result->atm_digital_objects_ms)?
                        array_unique($result->atm_digital_objects_ms):
                        (isset($result->atm_digital_objects_ms)?
                            array($result->atm_digital_objects_ms):
                        NULL)
                    ),
                    'accordion' => array(
                        t('Composers') => (is_array($result->atm_concert_composer_ms)?
                            (array_unique($result->atm_concert_composer_ms)):
                            (isset($result->atm_concert_composer_ms)?
                                array($result->atm_concert_composer_ms):
                                (NULL))),
                        t('Performers') => (is_array($result->atm_concert_player_ms)?
                            (array_unique($result->atm_concert_player_ms)):
                            (isset($result->atm_concert_player_ms)?
                                array($result->atm_concert_player_ms):
                                (NULL)))
                    ), 
                    'date' => new DateTime($result->atm_concert_date_dt)
            )
        );
            //FIXME: Generating stuff here seems kinda bad...
    break;
    case "Performance":
    case "Obras":
            $toReturn['piece'] = $result->atm_performance_piece_title_s;
            $toReturn['composer'] = l($result->atm_performance_composer_name_s, "fedora/repository/$result->atm_performance_composer_pid_s");
            //FIXME (minor):  If the perfomance is somehow part of multiple entities/concerts,
            //	this could break.
            $toReturn['concertPid'] = $result->rels_isMemberOf_ms;
            $toReturn['concert'] = l($result->atm_performance_concert_name_s, "fedora/repository/$result->rels_isMemberOf_ms");
            $toReturn['year'] = $result->atm_performance_year_s;
            $toReturn['concert_path'] = "fedora/repository/$result->rels_isMemberOf_ms/-/-/$result->rels_concertOrder_ms";
            $toReturn['cycle'] = $result->atm_performance_concert_cycle_s;
            $toReturn['audio'] = array();
            if ($result->atm_performance_mp3_b) {
                $toReturn['audio'] = array($result->PID);
            }
            else {
                $aud = $result->atm_performance_movement_ms;
                $mov = $result->atm_performance_movement_name_ms;
                $toReturn['audio'] = is_array($aud)?$aud:array($aud);
                $toReturn['movement'] = is_array($mov)?$mov:array($mov);
            }
            $players = FJM::makeArray($result->atm_performance_player_ms);
            $instrument = FJM::makeArray($result->atm_performance_inst_ms);
            for ($i = 0; $i < count($players); $i++) {
              $toReturn['players'][$players[$i]][] = $instrument[$i];
            }
            $toReturn['score'] = $result->rels_basedOn_ms;
            $toReturn['score_link'] = l('Score', "fedora/repository/". islandora_fjm_get_pid_from_array($toReturn['score']), array('attributes' => array('class' => 'pdf', 'target' => '_blank')));
    break;
    case "Lecture":
    case "Archivo de voz":
            $toReturn['description'] = $result->atm_lecture_title_s;
            $toReturn['concert'] = $result->atm_lecture_concert_title_s;
            $toReturn['year'] = $result->atm_facet_year_s;
            $toReturn['cycle'] = $result->atm_lecture_concert_cycle_s;
            $toReturn['audio'] = array($result->PID);
    break;
    case "Performer":
    case "Intérpretes":
            $toReturn['name'] = $result->atm_performer_name_s;
            $toReturn['instrument'] = $result->atm_performer_instrument_s;
            $toReturn['group'] = $result->atm_performer_group_s;
            $toReturn['concert'] = l($result->atm_performer_concert_title_s, "fedora/repository/$result->atm_performer_concert_pid_s");
            $toReturn['concert_path'] = "fedora/repository/$result->atm_performer_concert_pid_s/-/-/$result->atm_performer_concert_order_s";
            $toReturn['cycle'] = $result->atm_performer_concert_cycle_s;
            $toReturn['piece'] = $result->atm_performer_piece_title_s;
            $toReturn['year'] = $result->atm_performer_year_s;
    break;
    case "Program":
    case "Programas de mano":
            $toReturn['concert'] = l($result->atm_program_concert_title_s, "fedora/repository/$result->rels_isMemberOf_ms");
            $toReturn['year'] = $result->atm_program_year_s;
            //FIXME (minor):  concert cycle does not need to be multivalued...
            $toReturn['cycle'] = $result->atm_program_concert_cycle_ms;
            $toReturn['titn'] = $result->atm_program_titn_s;
            $toReturn['titn_link'] = l(t('Go'), FJM::getTitnAddr($toReturn['titn']));
            //FIXME (minor): Index should not contain multiple copies of the same author, so this 'array_unique' should not be necessary
            $toReturn['author'] = array_unique(FJM::makeArray($result->atm_program_author_ms));
            $toReturn['PDF_link'] = l(t('PDF'), "fedora/repository/$result->PID", array('attributes' => array('class' => 'pdf', 'target' => '_blank')));
    break;
    case "Score":
    case "Partituras":
            $toReturn['composer'] = l($result->atm_score_composer_s, "fedora/repository/$result->atm_score_composer_pid_s");
            $toReturn['title'] = $result->atm_score_title_s;
            $toReturn['titn'] = $result->atm_score_titn_s;
            $toReturn['titn_link'] = ($toReturn['titn'] > 0)?l(t('Go'), FJM::getTitnAddr($toReturn['titn'])): 
                /**
                 * @todo REMOVEME: Field to be left blank without link...
                 * (http://support.discoverygarden.ca/attachments/download/480/CLAMOR_site_feedback.docx)
                 * //t('N/A')
                 */ 
                "";
            $toReturn['pdf'] = $result->atm_score_pdf_b;
            $toReturn['PDF_link'] = ($toReturn['pdf'])? l(t('PDF'), "fedora/repository/$result->PID", array('attributes' => array('class' => 'pdf', 'target' => '_blank'))) : 
                /**
                 * @todo REMOVEME: Field to be left blank without link... 
                 * (http://support.discoverygarden.ca/attachments/download/480/CLAMOR_site_feedback.docx) 
                 * //t('N/A')
                 */ 
                "";
    break;
    default:
            $toReturn[] = "Unknown type!";
    }

    $toReturn['type'] = $result->atm_type_s;
    $toReturn['PID'] = $result->PID;

    $vars['item'] = $toReturn;
}

/**
 * @todo Complete...
 * @param array $vars 
 */
function islandora_fjm_preprocess_islandora_fjm_atm_concert(&$vars) {
    $pid = $vars['pid'];
    //$concert = array();
    
    $concertResults = FJM::performSolrQ("PID:\"$pid\"", 
        implode(',',
            array(
                "PID",
                "atm_concert_title_s",
                "atm_concert_cycle_s",
                "atm_concert_date_dt",
                "atm_concert_description_s",
                "atm_concert_program_pdf_pid_s",
                "atm_concert_program_titn_s"
            )
        ),
        array());
    $performanceResults = FJM::performSolrQ("atm_type_s:\"Obras\" AND rels_isMemberOf_ms:\"$pid\"", 
        implode(',', 
            array(
                "PID",
                "atm_performance_piece_title_s",
                "atm_performance_composer_name_s",
                "atm_performance_score_pdf_b",
                "atm_performance_mp3_b",
                "rels_basedOn_ms",
                "atm_performance_movement_ms",
                "atm_performance_composer_pid_s",
                "rels_concertOrder_ms",
                "atm_performance_score_titn_s"
            )
        ),
        array(
            'sort' => 'atm_performance_order_i asc'
        )
    );
    $lectureResults = FJM::performSolrQ("atm_type_s:\"Archivo de voz\" AND rels_isMemberOf_ms:\"$pid\"",
        implode(',',
            array(
                "PID",
                "atm_lecture_title_s"
            )
        )
    );
    $concert_xpath = new DOMXPath($concertResults);
    $concert_doc = $concert_xpath->query('/response/result[@name="response"]/doc')->item(0);
    $performance_xpath = new DOMXPath($performanceResults);
    $lecture_xpath = new DOMXPath($lectureResults);
    $concert = array(
        'title' => $concert_xpath->evaluate('string(str[@name="atm_concert_title_s"]/text())', $concert_doc),
        'cycle' => $concert_xpath->evaluate('string(str[@name="atm_concert_cycle_s"]/text())', $concert_doc),
        'date' => new DateTime($concert_xpath->evaluate("string(normalize-space(date[@name='atm_concert_date_dt']/text()))", $concert_doc)),
        'description' => $concert_xpath->evaluate('string(str[@name="atm_concert_description_s"]/text())', $concert_doc),
        'performance' => array(),
        'performance_rows' => array(),
        'lecture' => array(),
        'lecture_rows' => array(),
        'program' => array(
            'pid' => $concert_xpath->evaluate('string(str[@name="atm_concert_program_pdf_pid_s"]/text())', $concert_doc),
            'titn' => $concert_xpath->evaluate('string(str[@name="atm_concert_program_titn_s"]/text())', $concert_doc),
        )
    );
    
    foreach ($performance_xpath->query("/response/result[@name='response']/doc") as $node) {
        
        $performance = array(
            'pid' => $performance_xpath->evaluate("string(str[@name='PID']/text())", $node),
            'piece' => $performance_xpath->evaluate("string(str[@name='atm_performance_piece_title_s']/text())", $node),
            'composer' => array(
                'pid' => $performance_xpath->evaluate("string(str[@name='atm_performance_composer_pid_s']/text())", $node),
                'name'=> $performance_xpath->evaluate("string(str[@name='atm_performance_composer_name_s']/text())", $node)
            ),
            'localpdf' => ($performance_xpath->evaluate("string(bool[@name='atm_performance_score_pdf_b']/text())", $node) === 'true'),
            'localpdfscore' => $performance_xpath->evaluate("string(arr[@name='rels_basedOn_ms']/str[contains(text(), ':')]/text())", $node),
            'score_titn' => $performance_xpath->evaluate("string(str[@name='atm_performance_score_titn_s']/text())", $node),
            'order' => $performance_xpath->evaluate("string(arr[@name='rels_concertOrder_ms']/str[1]/text())", $node),
            'mp3stat' => ($performance_xpath->evaluate("string(bool[@name='atm_performance_mp3_b']/text())", $node) == 'true'),
            'movements' => array()
        );
        
        $performance['rows'] = array(
            array(
                array(
                    'data' => $performance['piece'],
                    'colspan' => '2',
                    'class' => 'atm_piecename'
                ),
                array(
                    'data' => l($performance['composer']['name'], "fedora/repository/" . $performance['composer']['pid'])
                ),
                array(
                    'data' => (
                        ($performance['localpdf'])?
                        (l(t("PDF"), "fedora/repository/" . $performance['localpdfscore'], array('attributes' => array('class' => 'pdf', 'target' => '_blank')))):
                        (t("N/A"))) //TODO (minor): Don't know if they want this column populated if there's none.
                ),
                array(
                    'data'=> (
                        (!empty($performance['score_titn']))?
                        (l(t("Go"), FJM::getTitnAddr($performance['score_titn']))):
                        (t("N/A")) //TODO (minor): Don't know if they want this column populated if there's none.
                    )
                ),
                array(
                    'data' => (
                        ($performance['mp3stat'])?
                        ('
                            <div class="atm_track concertOrder_' . $performance['order'] . '">
                                ' . l("<!-- placeholder -->", "fedora/repository/" . $performance['pid'] . '/MP3', array('html' => TRUE)) . '
                            </div>'):
                        ('  <!-- MP3 is probably in movements -->')
                    )
                )
            )
        );
        
        if ($performance_xpath->evaluate("count(arr[@name='atm_performance_movement_ms']/str)", $node) > 0) {
            $movements = new DOMXPath(
                FJM::performSolrQ(
                    'rels_hasModel_ms:"atm:movementCModel" AND rels_isMemberOf_ms:"' . $performance['pid'] . '"', 
                    'PID,title_s,hasMP3_b',
                    array(
                        'sort' => 'pOrder_s asc'
                    )
                )
            );

            foreach ($movements->query("/response/result[@name='response']/doc") as $mov_node) {
                $movement = array(
                    'pid' => //$movements->evaluate("substring-after(r:movement/@uri, '/')", $mov_node),
                        $movements->evaluate("string(str[@name='PID']/text())", $mov_node),
                    'name' => //$movements->evaluate("string(r:name/text())", $mov_node)
                        $movements->evaluate("string(str[@name='title_s']/text())", $mov_node),
                    'hasMP3' => $movements->evaluate("string(bool[@name='hasMP3_b']/text())", $mov_node)
                );

                $performance['rows'][] = array(
                    array(
                        'data' => "", //empty cell for formatting
                        'class' => 'atm_movement_empty_cell'
                    ),
                    array(
                        'data' => $movement['name'],
                        'colspan' => '4',
                        'class' => 'atm_movement_name'
                    ),
                    array(
                        'data' => (
                            (!$performance['mp3stat'] && $movement['hasMP3'])?
                            ('
                                <div class="atm_track">
                                    ' . l('<!-- placeholder -->', 'fedora/repository/' .  $movement['pid'] . '/MP3', array('html' => TRUE)) . '
                                </div>
                            '):
                            ("<!-- MP3 in performance, or none -->")
                        )
                    )
                );
            }
        }
        
        $concert['performance'][] = $performance;
        $concert['performance_rows'] = array_merge($concert['performance_rows'], $performance['rows']);
    }
    
    foreach ($lecture_xpath->query("/response/result[@name='response']/doc") as $node) {
        $lecture = array(
            'pid' => $lecture_xpath->evaluate("string(str[@name='PID']/text())", $node),
            'description' => $lecture_xpath->evaluate("string(str[@name='atm_lecture_title_s']/text())", $node),
        );
        
        $lecture['row'] = array(
            $lecture['description'],
            array(
                'data' => '
                    <div class="atm_track">
                    ' . l("<!-- placeholder -->", 'fedora/repository/' . $lecture['pid'] . '/MP3', array('html' => TRUE)) . ' 
                    </div>
                ',
                'style' => 'float:right;'
            )
        );
        $concert['lecture'][] = $lecture;
        $concert['lecture_rows'][] = $lecture['row'];
    }
    
    $concert['headers'] = array(
        'performance' => array(
            array(
                'data' => t("Piece")   
            ),
            array(  //To allow indentation "enforcement" for movements...
                'data' => "",
                'width' => '200'
            ),
            array(
                'data' => t("Composer")
            ),
            array(
                'data' => t("Score")
            ), //Score in Fedora Repo
            array(
                'data' => t("Biblio")
            ),   //Score in Library
            array(
                //Playable track...
                'data' => "",
            )
        ),
        'lecture' => array(
            array(
                'data' => t("Description")
            ),
            array(
                'data' => ""
            )
        )
    );
    
    $vars['concert'] = $concert;
}

/**
 * Assemble the required information given the PID of a score.
 * @param &array $vars Input/output
 */
function islandora_fjm_preprocess_islandora_fjm_atm_score(&$vars) {
    $pid = $vars['pid'];
    
    $base = drupal_get_path("module", "islandora_fjm");
    $output = '';
    $score_xpath = new DOMXPath(FJM::performSolrQ("PID:\"$pid\"",
        "atm_score_title_s,atm_score_pdf_b,atm_score_composer_s,atm_score_titn_s"));
    $score_result = $score_xpath->query("/response/result[@name='response']/doc")->item(0);
    
    $vars['title'] = $score_xpath->evaluate("string(str[@name='atm_score_title_s']/text())", $score_result);
    $vars['composer'] = $score_xpath->evaluate("string(str[@name='atm_score_composer_s']/text())", $score_result);
    //$output .= $this->addViewer();
    $modsUrl = 'http://' . $_SERVER['HTTP_HOST'] . url("fedora/repository/$pid/MODS"); 
    $mods = DOMDocument::loadXML(do_curl($modsUrl));
    if ($mods) {
        $vars['abstract'] = $mods->getElementsByTagName('abstract')->item(0)->nodeValue;
        $vars['notes'] = array();

        foreach ($mods->getElementsByTagName('note') as $node) {
            $vars['notes'][] = $node->nodeValue;
        }
    }
}

function islandora_fjm_preprocess_islandora_fjm_flexpaper(&$vars) {
    $pid = $vars['pid'];
    $dsid = $vars['dsid'];
    
    if (isset($vars['flexpaper_config']) && !isset($vars['flexpaper_config']['SwfFile']))
        $vars['flexpaper_config']['SwfFile'] = '"http://' . $_SERVER['HTTP_HOST'] . url("fedora/repository/$pid/$dsid") . '"';
}

function islandora_fjm_preprocess_islandora_fjm_atm_program(&$vars) {
    $pid = $vars['pid'];
    
    $xpath = new DOMXPath(FJM::performSolrQ("PID:\"$pid\"", "atm_program_concert_title_s,atm_program_concert_cycle_ms,atm_program_author_s,atm_program_titn_s,atm_program_year_s"));
    $result = $xpath->query("/response/result[@name='response']/doc")->item(0);
    
    $vars['concert'] = array();
    $vars['concert']['title'] = $xpath->evaluate("string(str[@name='atm_program_concert_title_s']/text())", $result);
    $vars['concert']['cycle'] = $xpath->evaluate("string(arr[@name='atm_program_concert_cycle_ms']/str[1]/text())", $result);
    $vars['concert']['year'] = $xpath->evaluate("string(str[@name='atm_program_year_s']/text())", $result);
    
    $modsUrl = 'http://' . $_SERVER['HTTP_HOST'] . url("fedora/repository/$pid/MODS");
    $mods = DOMDocument::loadXML(do_curl($modsUrl));
    if ($mods) {
      $vars['toc'] = $mods->getElementsByTagName('tableOfContents')->item(0)->nodeValue;
      $vars['notes'] = array();

      foreach ($mods->getElementsByTagName('note') as $node) {
          //$output .= "<p>$node->nodeValue</p>";
          $vars['notes'][] = $node->nodeValue;
      }
    }
}

function islandora_fjm_preprocess_islandora_fjm_atm_person(&$vars) {
    $pid = $vars['pid'];
    FJM::userAgentHack();
    $eacdoc = new DOMDocument();
    
    #FIXME:  Need to deal with the multi-site stuff...
    if (!$eacdoc->loadXML(do_curl('http://' . $_SERVER['HTTP_HOST'] . url("fedora/repository/$pid/EAC-CPF")))) {
        //dsm($vars);
        return;
    }
    $eaccpf = new DOMXPath($eacdoc);
    
    $vars['name'] = array(
        'first' => $eaccpf->evaluate('string(/eac-cpf/cpfDescription/identity/nameEntry[@localType="primary"]/part[@localType="forename"])'),
        'last' => $eaccpf->evaluate('string(/eac-cpf/cpfDescription/identity/nameEntry[@localType="primary"]/part[@localType="surname"])')
    );
    $vars['date']['birth'] = $eaccpf->evaluate('string(/eac-cpf/cpfDescription/description/existDates/dateRange/fromDate/@standardDate)');
    $vars['date']['death'] = $eaccpf->evaluate('string(/eac-cpf/cpfDescription/description/existDates/dateRange/toDate/@standardDate)');
    
    $vars['biography'] = $eacdoc->saveXML($eaccpf->evaluate('/eac-cpf/cpfDescription/description/biogHist[@localType="primary"]')->item(0));
    if (strpos($vars['biography'], '&lt;p&gt;')) {
        $vars['biography'] = html_entity_decode($vars['biography']);
    }
    
    $vars['performances'] = array(
        'composed' => array(),
        'played' => array()
    );
    
    //Get a list of all performances in which this person has either composed
    //  the piece being played, or has played in the piece.
    $performances = array(
        'associated' => new DOMXPath(FJM::performSolrQ("atm_performance_composer_pid_s:\"$pid\" OR atm_performance_performer_pid_ms:\"$pid\"", "*"))
    );
    //Define headers (presumably for a couple of tables), as well as how to get
    //  values for the given column out of the xpath objects created previously,
    //  and what to name them.
    $headers = array(
        'associated' => array(
            array(
                'data' => t('Piece'),
                'sField' => 'title',
                'xpath' => 'str[@name="atm_performance_piece_title_s"]/text()',
                'linkTo' => array(
                    'pid' => array(
                        'xpath' => 'arr[@name="rels_isMemberOf_ms"]/str[1]/text()'
                    )
                )
            ),
            
            array(
                'data' => t('Year'),
                'sField' => 'year',
                'xpath' => 'str[@name="atm_performance_year_s"]/text()'
            ),
            /* @todo:  Remove
             * @removeme: Not needed, as per http://support.discoverygarden.ca/issues/1492
            array(
                'data' => t('Concert'),
                'sField' => 'concert',
                'xpath' => 'str[@name="atm_performance_concert_name_s"]/text()',
                'linkTo' => array(
                    'pid' => array(
                        'xpath' => 'arr[@name="rels_isMemberOf_ms"]/str[1]/text()'
                    )
                )
            ),
            array(
                'data' => t('Cycle'),
                'sField' => 'cycle', 
                'xpath' => 'str[@name="atm_performance_concert_cycle_s"]/text()'
            ),
            array(
                'data' => t('Score'),
                'sField' => 'score',
                'xpath' => '"PDF"',
                'linkTo' => array(
                    'pid' => array(
                        'xpath' => 'arr[@name="rels_basedOn_ms"]/str[contains(text(), ":")]/text()',
                        'check' => 'bool[@name="atm_performance_score_pdf_b"]/text()',
                        'failvalue' => '"N/A"'
                    )
                )
            )*/
        )
    );
    
    
    //Perform magic...  
    //  Really, use the two arrays (of arrays) we just defined to build an array
    //  containing the actual data to pass to the template...
    foreach ($performances as $key => $xpath) {
        foreach ($xpath->evaluate("/response/result[@name='response']/doc") as $doc) {
            $temp = array();

            foreach ($headers[$key] as $col) {
                $temp[$col['sField']] = $xpath->evaluate("string(" . $col['xpath'] . ")", $doc);
                
                //Make this column a link, based on...
                if (isset($col['linkTo'])) {
                    //... a pid obtained via another xpath
                    if (isset($col['linkTo']['pid'])) {
                        //If there is a check and it fails, continue to the next 
                        //  column without creating the link.
                        if (isset($col['linkTo']['pid']['check']) && !$xpath->evaluate("string(" . $col['linkTo']['pid']['check'] . ")", $doc)) {
                            //dsm($xpath->evaluate("string(" . $col['linkTo']['pid']['check'] . ")"));
                            $temp[$col['sField']] = $xpath->evaluate("string(" . $col['linkTo']['pid']['failvalue'] . ")", $doc);
                            continue;
                        }
                        
                        $temp[$col['sField']] = l($temp[$col['sField']], "fedora/repository/" . $xpath->evaluate("string(" . $col['linkTo']['pid']['xpath'] . ")", $doc));
                    }
                }
                //elseif(yadda yadda){}
            }

            $vars['performances'][$key][] = $temp;
        }
    }
    $vars['performance_headers'] = $headers['associated'];

    //FIXME (minor): Seems like setting/unsetting should be avoidable...  with
    //  a custom "table" theme function?
    //Unset "mystuff" (the stuff I don't want in the markup...)
    $mystuff = array('sField', 'xpath', 'linkTo');
    foreach ($headers['associated'] as $idx => $header) {
        foreach ($header as $key => $value) {
            if (in_array($key, $mystuff)) {
                unset($vars['performance_headers'][$idx][$key]);
            }
        }
    }
}

function islandora_fjm_preprocess_islandora_fjm_atm_imagegallery(&$vars) {
    $pid = $vars['pid'];
    
    $vars['images'] = FJM::getRelatedImagesByPid($pid);    
}

function islandora_fjm_preprocess_page(&$vars) {
  $classes = explode(' ', $vars['body_classes']);
  //Kinda gross looking, due to the manner of argument/path parsing...  Oh well.
  switch (arg(0)) {
    case 'islandora':
      switch (arg(1)) {
        case 'solr':
        switch (arg(2)) {
          case 'search':
            $classes[] = 'page-islandora-solr-search-clamor';
            break;
        }
        break;
      }
      break;
  }
  $vars['classes_array'] = $classes;
  $vars['body_classes'] = implode(' ', $classes);
}
