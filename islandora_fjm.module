<?php
/**
 * Similar to Python's zip function, which takes a number of sequences (arrays), 
 * and produces a single sequence of sequences (tuples).
 * @deprecated This functionality (save the bit with associating stuff) can be done by array_map
 * @return array 
 */
function islandora_fjm_zip() {
  $args = func_get_args();
  $arrayToReturn = array();
  $arraysToZip = array();
  $lengths = array();
  $key = null;
  foreach ($args as &$arg) {
    if (is_array($arg)) {
      if (!empty($key)) {
        $arraysToZip[$key] = $arg;
      }
      else {
        $arraysToZip[] = $arg;
      }
      $lengths[] = count($arg);
      $key = null;
    }
    else if (is_string($arg)) {
      $key = $arg;
    }
  }
  
  for($i = 0; $i < min($lengths); $i++) {
    $tuple = array();
    foreach($arraysToZip as $key => &$toZip) {
      $tuple[$key] =& $toZip[$i];
    }
    $arrayToReturn[] = $tuple;
  }
  
  return $arrayToReturn;
}
/**
 * Similar to node_load, accepts an array of parameters, but returns an array
 *  of nodes instead of the original first only.  (Useful when iterating over
 *  all nodes of a given type).
 * 
 * @author Adam Vessey
 *    Modified from node_load in node.module
 * @param array $param
 * @return array Containing 'node' objects. 
 */
function islandora_fjm_loadnodes($param = array('march_menus')) {
  $nodes = array();
  
  if (is_numeric($param)) {
    $cond = 'n.nid = %d';
    $arguments[] = $param;
  }
  elseif (is_array($param)) {
    // Turn the conditions into a query.
    foreach ($param as $key => $value) {
      $cond[] = 'n.'. db_escape_table($key) ." = '%s'";
      $arguments[] = $value;
    }
    $cond = implode(' AND ', $cond);
  }
  else {
    return FALSE;
  }

  // Retrieve a field list based on the site's schema.
  $fields = drupal_schema_fields_sql('node', 'n');
  $fields = array_merge($fields, drupal_schema_fields_sql('node_revisions', 'r'));
  $fields = array_merge($fields, array('u.name', 'u.picture', 'u.data'));
  // Remove fields not needed in the query: n.vid and r.nid are redundant,
  // n.title is unnecessary because the node title comes from the
  // node_revisions table.  We'll keep r.vid, r.title, and n.nid.
  $fields = array_diff($fields, array('n.vid', 'n.title', 'r.nid'));
  $fields = implode(', ', $fields);
  // Rename timestamp field for clarity.
  $fields = str_replace('r.timestamp', 'r.timestamp AS revision_timestamp', $fields);
  // Change name of revision uid so it doesn't conflict with n.uid.
  $fields = str_replace('r.uid', 'r.uid AS revision_uid', $fields);

  $query = "SELECT $fields 
    FROM {node} n 
      INNER JOIN {users} u ON u.uid = n.uid 
      INNER JOIN {node_revisions} r ON r.vid = n.vid
    WHERE ";
  
  $result = db_query($query . $cond, $arguments);
  
  while($node_result = db_fetch_object($result)) {
    if ($node_result->nid) {
    // Call the node specific callback (if any) and piggy-back the
    // results to the node or overwrite some values.
      if ($extra = node_invoke($node_result, 'load')) {
        foreach ($extra as $key => $value) {
          $node_result->$key = $value;
        }
      }

      if ($extra = node_invoke_nodeapi($node_result, 'load')) {
        foreach ($extra as $key => $value) {
          $node_result->$key = $value;
        }
      }
    }
    $nodes[] = $node_result;
  }

  return $nodes;
}

/**
 * Function to update the Menu with external markup.
 * Happens in this implementation of hook_cron...  Perhaps it should be moved?
 * @param $node_select array Selector as per node_load.  For use in this \
 *   function, these nodes need a Link field named field_link, and a text field \
 *   of the element to select named 'field_element_id'
 */
function islandora_fjm_scraper($node_select = array('type' => 'march_menus')) {
  //Grab the nodes to modify (using our modification of node_load
  $nodes = islandora_fjm_loadnodes($node_select);

  $doc = new DOMDocument();
  
  //Process the nodes:
  foreach($nodes as $node) {
    //Grab the page containing the markup
    $doc->loadHTMLFile($node->field_link[0]['url']);
    
    //Parse it, so as to be able to fix relative links
    $url_info = parse_url($node->field_link[0]['url']);
    
    //XPath is nice. :P
    $xpath = new DOMXPath($doc);
    
    //Select the element being scraped
    $scraped = $xpath->query("//*[@id='" .$node->field_element_id[0]['value'] . "']")->item(0);
    
    //Select all the links in the element being scraped which are relative to the host...
    foreach($xpath->query(".//a[starts-with(@href, '/')]", $scraped) as $rel_link) {
      //And make them absolute
      //FIXME (minor):  A different port would break this...
      $rel_link->setAttribute('href', t('!prot://!host!path', array(
          '!prot' => $url_info['scheme'], 
          '!host' => $url_info['host'], 
          '!path' => $rel_link->getAttribute('href')
        )));
    }
    
    //'Output':
    //Create a new DOMDoc
    $doc = new DOMDocument();
    
    //Import the scraped node... 
    $imp = $doc->importNode($scraped, TRUE);
    //...into the root node
    $doc->appendChild($imp);
    
    //Write out the scraped content
    $node->body = $doc->saveHTML();
    //And save it to the node.
    node_save($node);
  }
}

/**
 * Implementation of hook_cron()
 */
function islandora_fjm_cron() {
  islandora_fjm_scraper();
}

function islandora_fjm_get_pid_from_array(&$array) {
  if (is_array($array)) {
    foreach($array as $key => $value) {
      if (strpos($value, ':')) {
        return $value;
      }
    }
  }
  else {
    return $array;
  }
}

function islandora_fjm_get_related_images_by_pid($pid, $defaultImage = NULL, $dsid = 'JPG', $tndsid = 'TN') {
    $fedoraPath = variable_get('fedora_base_url', 'http://localhost:8080/fedora');

    $queryResult = islandora_fjm_perform_sparql_query('
        PREFIX atm-rel: <http://digital.march.es/atmusica#>
        PREFIX dc: <http://purl.org/dc/elements/1.1/>
        SELECT $label $icon
        FROM <#ri>
        WHERE {
            {
                $icon atm-rel:isIconOf $obj
            }
            UNION
            {
                $icon atm-rel:isImageOf $obj
            }
            FILTER(sameterm($obj, <info:fedora/' . $pid . '>))
            OPTIONAL{$icon dc:description $label}
        }
    ');
    
    //Get all the result elements, and iterate through them.
    $elements = $queryResult->getElementsByTagName('result');
    $images = array();
    if ($elements->length > 0) {
        for ($i=0; $i < $elements->length; $i++) {
            //Get the icon element from the search results
            $resultElement = $elements->item($i);
            $iconElement = $resultElement->getElementsByTagName('icon')->item(0);
            $altElement = $resultElement->getElementsByTagName('label')->item(0);

            //Get the PID from the icon element, and the alttext similarly
            $imagePid = substr($iconElement->attributes->getNamedItem('uri')->textContent, 12);
            $altText = $altElement->textContent;
            if (!empty($imagePid)) {
                $images[] = array(
                    'path' => url("fedora/repository/$imagePid/$dsid"),
                    'thumbnail' => url("fedora/repository/$imagePid/$tndsid"),
                    'alt' => ($altText)
                );
            }
        }
    }
    elseif (isset($defaultImage)) {
        $images[] = array(
            'path' => "$defaultImage/$dsid",
            'thumbnail' => "$defaultImage/$tndsid",
            'alt' => t("Default Image")
        );
    }
    
    return $images;
}

function islandora_fjm_get_titn_addr($titn) {
    $url = 'http://www.march.es/abnopac/abnetcl.exe?ACC=DOSEARCH&xsqf01=';
    $end = '.titn.';
    return $url . $titn . $end;
}
 
 /**
  * XXX:  Little hack to allow libxml to access HTTP stuff directly,
  *  instead of having to first load it with curl.
  */
 function _islandora_fjm_user_agent_hack() {
  static $hacked = FALSE;
  if (!$hacked) {
    $opts = array(
        'http' => array(
            'user_agent' => 'PHP libxml agent',
        )
    );

    $context = stream_context_create($opts);
    libxml_set_streams_context($context);
    $hacked = TRUE;
  }
}
 
 /**
 * Performs the given RI query.
 * Might be duplicating code from the Fedora API (I seem to recall something
 *   but with a weird name).
 * 
 * FIXME: Could probably made more fail-safe (avoiding passing directly from the curl call to loadXML, for example.)
 *
 * @param String $query
 * @param Integer $limit
 * @param Integer $offset
 * @return DOMDocument 
 */
function _islandora_fjm_perform_ri_query($query, $type = 'itql', $limit = -1, $offset = 0) {
    _islandora_fjm_user_agent_hack();
    $queryUrl = variable_get('fedora_repository_url', 'http://localhost:8080/fedora/risearch');
    $queryUrl .= "?type=tuples&flush=TRUE&format=Sparql" . (($limit > 0)?("&limit=$limit"):("")) . "&offset=$offset&lang=$type&query=" . urlencode($query);
    $doc = DOMDocument::loadXML(do_curl($queryUrl));
    return ((!$doc)?(new DOMDocument()):($doc));
}
function islandora_fjm_perform_itql_query($query, $limit = -1, $offset = 0) {
    return _islandora_fjm_perform_ri_query($query, 'itql', $limit, $offset);
}  
function islandora_fjm_perform_sparql_query($query, $limit = -1, $offset = 0) {
    return _islandora_fjm_perform_ri_query($query, 'sparql', $limit, $offset);
}

/**
 * @deprecated Should probably use the Apache_Solr_Service class instead...  It'd be less work.
 * @param string $query Query string for Solr
 * @param mixed $fields Either a CSV string or an array of fields to return
 * @param array $otherParams
 * @return DOMDocument containing the results (or empty if an error occured) 
 */
function islandora_fjm_perform_solr_q($query, $fields = "PID", $other_params = array()) {
  _islandora_fjm_user_agent_hack();
  $solr_url = variable_get('fedora_solr_search_url', 'http://localhost:8080/solr') . '/select';
  $other_params['q'] = $query;
  
  if (!is_array($fields)) {
    $fields = explode(',', $fields);
  }
  if (!is_array($other_params['fl'])) {
    $other_params['fl'] = explode(',', $other_params['fl']);
  }

  $other_params['fl'] = array_merge($other_params['fl'], $fields);
  
  $solr_url = url($solr_url, array(
    'absolute' => TRUE,
    'query' => http_build_query($other_params, NULL, '&')
  ));

  $doc = DOMDocument::loadXML(do_curl($solr_url));
  
  $error = error_get_last();
  if (is_callable("dsm") && !empty($error)) {
    dsm($error);
  }

  return ((!$doc)?(new DOMDocument()):($doc));
}
